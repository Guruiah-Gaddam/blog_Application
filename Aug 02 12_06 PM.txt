package com.example.demo.entity;

import java.sql.Date
;
import java.util.List;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class User {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	@Column(nullable = false)
	private String name;
	@Column(unique = true,nullable = false)
	private String email;
	@Column(unique = true,nullable=false)
	private String phoneNO;
	@Column(nullable = false)
	private String password;
	private char gender;
	private Date dob;
	@OneToMany(mappedBy = "user")
	private List<Post> post;
	@OneToMany(mappedBy = "user")
	private List<Comment> comments;
}












package com.example.demo.entity;

import java.time.LocalDateTime;
import java.util.List;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Post {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String title;
	private String postData;
	private LocalDateTime creationTime;
	@OneToMany(mappedBy = "post")
	private List<Comment> comments;
	@ManyToOne
	private User user;
}




package com.example.demo.entity;

import java.time.LocalDateTime;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Comment {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String commentData;
	private LocalDateTime creationTime;
	@ManyToOne
	private Post post;
	@ManyToOne
	private User user;
}














package com.example.demo.repositries;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.entity.User;

public interface UserRepositry extends JpaRepository<User, Integer> {

}











package com.example.demo.repositries;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.entity.Post;

public interface PostRepositry  extends JpaRepository<Post, Integer>{

}







package com.example.demo.repositries;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.entity.Comment;

public interface CommentRespositry extends JpaRepository<Comment, Integer> {

}










	
  package com.example.demo.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.User;
import com.example.demo.repositries.UserRepositry;

@Repository
public class UserDao {

	@Autowired
	private UserRepositry repositry;
	
	
	public User saveUser(User user) {
		return null;
	}
	
	
	public User updateUser(User user,int id) {
		user.setId(id);
		return null;
	}
	
	public User fetchUser(int id) {
		return null;
	}
	
	public List<User> fetchAllUsers(){
		return null;
	}
	
	public User deleteUser(int id) {
		return null;
	}
	
}












package com.example.demo.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.Post;
import com.example.demo.repositries.PostRepositry;

@Repository
public class PostDao {

	@Autowired
	private PostRepositry repositry;
	
	public Post savePost(Post post ) {
		return null;
	}
	
	public Post updatePost(Post post,int id) {
		post.setId(id);
		return null;
	}
	
	public Post fetchPost(int id) {
		return null;
	}
	
	public List<Post> fetchAllPosts(){
		return null;
	}
	
	public List<Post> fetchPostsByUserId(int id){
		return null;
	}
	
	public Post deletePost(int id) {
		return null;
	}
}




package com.example.demo.Exceptions;

public class EntityNotFoundException extends RuntimeException {

	
	public EntityNotFoundException(String msg) {
		super(msg);
	}
	
}




package com.example.demo.Exceptions;

public class EntityAlreadyExistsException extends RuntimeException{

	public EntityAlreadyExistsException(String msg) {
		super(msg);
	}
}





package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.dao.UserDao;
import com.example.demo.entity.ResponseStructure;
import com.example.demo.entity.User;

@Service
public class UserService {

	@Autowired
	private UserDao dao;
	
	public ResponseStructure<User> saveUser(User user) {
		return null;
	}
	
	public ResponseStructure<User> updateUser(User user,int id){
		return null;
	}
	
	public ResponseStructure<User> fetchUser(int id){
		return null;
	}
	
	public ResponseStructure<List<User>> fetchAllUsers(){
		return null;
	}
	
	public ResponseStructure<User> deleteUser(int id){
		return null;
	}
}













package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.dao.PostDao;
import com.example.demo.entity.Post;
import com.example.demo.entity.ResponseStructure;

@Service
public class PostService {
	
	@Autowired
	private PostDao dao;

	public ResponseStructure<Post> savePost(Post post,int userId){
		return null;
	}
	
	public ResponseStructure<Post> updatePost(Post post,int id){
		return null;
	}
	
	public ResponseStructure<Post> fetchPost(int id){
		return null;
	}
	
	public ResponseStructure<List<Post>> fetchAllPosts(){
		return null;
	}
	
	public ResponseStructure<List<Post>> fetchPostsByUserId(int id){
		return null;
	}
	
	public ResponseStructure<Post> deletePost(int id){
		return null;
	}
}










package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.dao.CommentDao;
import com.example.demo.entity.Comment;
import com.example.demo.entity.ResponseStructure;

@Service
public class CommentService {
	
	@Autowired
	private CommentDao dao;

	public ResponseStructure<Comment> saveComment(Comment com, int userId, int postId) {
		return null;
	}

	public ResponseStructure<Comment> updateComment(Comment com, int id) {
		return null;
	}

	public ResponseStructure<Comment> fetchComment(int id) {
		return null;
	}

	public ResponseStructure<List<Comment>> fetchCommentsForPost(int postId) {
		return null;
	}

	public ResponseStructure<Comment> deleteComment(int id) {
		return null;
	}

	public ResponseStructure<List<Comment>> deleteCommentsForPost(int postId) {
		return null;
	}

}










package com.example.demo.Exceptions;

import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class HandleExceptions {

}











package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Post;
import com.example.demo.entity.ResponseStructure;
import com.example.demo.service.PostService;

@RestController
@RequestMapping("/post")
public class PostController {
	
	@Autowired
	public PostService service;

	
	@PostMapping("/save/{id}")
	public ResponseEntity<ResponseStructure<Post>> savePost(@RequestBody Post post,@PathVariable int userId){
		return null;
	}
	
	@PutMapping("/update/{id}")
	public ResponseEntity<ResponseStructure<Post>> updatePost(@RequestBody Post post,@PathVariable("id") int id){
		return null;
	}
	@GetMapping("/fetch/{id}")
	public ResponseEntity<ResponseStructure<Post>> fetchPost(@PathVariable("id") int id){
		return null;
	}
	
	@GetMapping("/fetch")
	public ResponseEntity<ResponseStructure<List<Post>>> fetchAllPosts(){
		return null;
	}
	
	@GetMapping("/fetchByUser/{id}")
	public ResponseEntity<ResponseStructure<List<Post>>> fetchPostsByUserId(@PathVariable("id") int id){
		return null;
	}
	
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<ResponseStructure<Post>> deletePost(@PathVariable("id") int id){
		return null;
	}
}





package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Comment;
import com.example.demo.entity.ResponseStructure;
import com.example.demo.service.CommentService;

@RestController
@RequestMapping("/comment")
public class CommentController {

	@Autowired
	private CommentService service;

	@PostMapping("/save/{userID}/{postId}")
	public ResponseEntity<ResponseStructure<Comment>> saveComment(@RequestBody Comment com,
			@PathVariable("userID") int userId, @PathVariable("postID") int postId) {
		return null;
	}

	@PutMapping("/update/{id}")
	public ResponseEntity<ResponseStructure<Comment>> updateComment(@RequestBody Comment com,
			@PathVariable("id") int id) {
		return null;
	}

	@GetMapping("/fetch/{id}")
	public ResponseEntity<ResponseStructure<Comment>> fetchComment(@PathVariable("id") int id) {
		return null;
	}

	@GetMapping("/fetchForPost/{postId}")
	public ResponseEntity<ResponseStructure<List<Comment>>> fetchCommentsForPost(@PathVariable("postId") int postId) {
		return null;
	}

	@DeleteMapping("/delete/{id}")
	public ResponseEntity<ResponseStructure<Comment>> deleteComment(@PathVariable("id") int id) {
		return null;
	}

	@DeleteMapping("/deleteAll/{postID}")
	public ResponseEntity<ResponseStructure<List<Comment>>> deleteCommentsForPost(@PathVariable("postID") int postId) {
		return null;
	}

}





package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.ResponseStructure;
import com.example.demo.entity.User;
import com.example.demo.service.UserService;

@RestController
@RequestMapping("/user")
public class UserController {
	
	@Autowired
	private UserService service;

	@PostMapping("/save")
	public ResponseEntity<ResponseStructure<User>> saveUser(@RequestBody User user) {
		return null;
	}
	@PutMapping("/update/{id}")
	public ResponseEntity<ResponseStructure<User>> updateUser(@RequestBody User user,@PathVariable("id") int id) {
		return null;
	}
	@GetMapping("/get/{id}")
	public ResponseEntity<ResponseStructure<User>> fetchUser(@PathVariable("id") int id){
		return null;
	}
	
	@GetMapping("/get")
	public ResponseEntity<ResponseStructure<List<User>>> fetchAllUsers(){
		return null;
	}
	
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<ResponseStructure<User>> deleteUser(@PathVariable("id") int id){
		return null;
	}
}




